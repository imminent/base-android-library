package com.imminentmeals.android.base;

import javax.annotation.Nonnull;
import javax.inject.Singleton;

import org.holoeverywhere.app.Application;
import org.holoeverywhere.preference.PreferenceManagerHelper;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountManager;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.StrictMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.imminentmeals.android.base.activity_lifecycle_callbacks.AccountFlowCallbacks;
import com.imminentmeals.android.base.activity_lifecycle_callbacks.GoogleAnalyticsCallbacks;
import com.imminentmeals.android.base.activity_lifecycle_callbacks.InjectionCallbacks;
import com.imminentmeals.android.base.ui.AccountActivity;
import com.imminentmeals.android.base.utilities.AccountUtilities;
import com.imminentmeals.android.base.utilities.GateKeeper;
import com.imminentmeals.android.base.utilities.ObjectGraph.ObjectGraphApplication;
import com.imminentmeals.android.base.utilities.lifecycle_callback.ApplicationHelper;
import com.imminentmeals.android.base.ManifestModule;
import com.squareup.otto.Bus;

import dagger.Module;
import dagger.ObjectGraph;
import dagger.Provides;

/**
 * <p>Enables {@link StrictMode} during debugging, creates the {@linkplain ObjectGraph object graph} for dependency
 * injection, and registers {@linkplain Application#ActivityLifecycleCallbacks Activity lifecycle callbacks}.
 * @author Dandré Allison
 */
public class BaseAndroidLibraryApplication extends Application implements ObjectGraphApplication {

    @SuppressLint("NewApi")
    @Override
    public void onCreate() {
        if (BuildConfig.DEBUG && GateKeeper.hasGingerbread())
            StrictMode.enableDefaults();
        super.onCreate();

        // Creates the dependency injection object graph
        _object_graph = ObjectGraph.create(new BaseAndroidLibraryModule(this));

        // TODO: setDefaultPreferences here
        ApplicationHelper.registerActivityLifecycleCallbacks(this, new AccountFlowCallbacks());
        ApplicationHelper.registerActivityLifecycleCallbacks(this, new GoogleAnalyticsCallbacks());
        ApplicationHelper.registerActivityLifecycleCallbacks(this, new InjectionCallbacks());
    }

    @Override
    @Nonnull public ObjectGraph objectGraph() {
        return _object_graph;
    }

    /**
     * <p>Module class that defines injection entry points that aren't defined in the
     * AndroidManifest (like Fragment and non-Android classes). This allows Dagger to inject
     * their dependencies. It also {@link Provides} dependencies that can be injected at entry
     * points.</p>
     *
     * @author Dandré Allison
     */
    @Module(
            entryPoints = {
                    // Fragments
                    AccountActivity.ChooseAccountFragment.class
            },
            includes = {
                    // Module generated by dagger-androidmanifest-plugin
                    ManifestModule.class
            }
    )
    /* package */static class BaseAndroidLibraryModule {

        /**
         * <p>Constructs the module using the {@link Context} to retrieve the application context
         * from which to retrieve context-dependent dependencies.</p>
         * @param context The context from which to retrieve the application context
         */
        public BaseAndroidLibraryModule(Context context) {
            _context = context.getApplicationContext();
        }

        @Provides @Singleton Bus provideBus() {
            return new Bus();
        }

        @Provides @Singleton Gson provideGson() {
            return new GsonBuilder().create();
        }

        @Provides SharedPreferences provideSharedPreferences() {
            return PreferenceManagerHelper.getDefaultSharedPreferences(_context);
        }

        @Provides AccountManager provideAccountManager() {
            return AccountManager.get(_context);
        }

        @Provides Context provideContext() {
            return _context;
        }

        @Provides Account provideTestAccount() {
            return new Account("test47", "fake:" + AccountUtilities.ACCOUNT_TYPE);
        }

        @Provides @Singleton AbstractAccountAuthenticator provideAccountAuthenticator(Context context) {
            return new AccountAuthenticatorService.FakeAccountAuthenticator(context);
        }

        /** The context in which the app is running */
        private final Context _context;
    }

    /** Application's object graph for handling dependency injection */
    private ObjectGraph _object_graph;
}
